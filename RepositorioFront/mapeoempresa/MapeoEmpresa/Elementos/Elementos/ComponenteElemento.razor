@inherits ComponenteTab
@if (display)
{
    @if (origen == "page")
    {
        <BodyComponenteElemento @ref="bodyComponenteElemento" />
    }
    else
    {
        <div class="modal fade show" tabindex="-1" style="display:block; background-color: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog modal-dialog-scrollable modal-xl">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Componente de elementos</h5>
                        <button type="button" class="btn-close" @onclick="CerrarComponente"></button>
                    </div>
                    <div class="modal-body">
                        <BodyComponenteElemento @ref="bodyComponenteElemento"/>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-success mr-5" @onclick="RetornarElemento">Seleccionar</button>
                    </div>
                </div>
            </div>
        </div>
    }

}
@code {
    public ElementoInterfazGraficaVentaDTO elementoActual { get; set; } = new ElementoInterfazGraficaVentaDTO();
    private BodyComponenteElemento bodyComponenteElemento;
    [Parameter]
    public string origen { get; set; } = string.Empty;
    [Parameter]
    public EventCallback TraerElementoEvent { get; set; }

    [Parameter]
    public EventCallback DesactivarEventoDetalle { get; set; }

    protected override Task OnInitializedAsync()
    {
        if (origen == "page")
        {
            display = true;
        }

        return base.OnInitializedAsync();
    }

    private void RetornarElemento()
    {
        var componente = bodyComponenteElemento;
        elementoActual = bodyComponenteElemento.elementoActual;
        if (elementoActual.CodigoArticulo != 0)
        {
            TraerElementoEvent.InvokeAsync();
            Dispose();
        }
    }


    private void CerrarComponente()
    {
        DesactivarEventoDetalle.InvokeAsync();
        Dispose();
    }

}